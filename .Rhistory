library(dplyr)
library(lme4)
library(ggplot2)
predicted_df= read.csv("C:/Users/Vicente/repo/ForestLandscapes/timeseries/predicted_leafing.csv")
predicted_df$date <- as.Date(predicted_df$date, format = "%Y_%m_%d")
print(head(predicted_df))
individuals <- length(unique(predicted_df$GlobalID))
print(individuals)
species_count <- predicted_df %>%
group_by(latin) %>%
summarize(individual_count = n_distinct(GlobalID))%>%
arrange(desc(individual_count))
print(head(species_count))
species1 <- predicted_df %>% filter(latin == species_count$latin[1])
ggplot(species1, aes(x = date, y = mean, colour= GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: reduced mean classified pixel",
x = "Date",
y = "Mean classified pixel"
) +
theme_minimal() +
theme(legend.position = "none")
species1$days <- as.integer(format(species1$date, "%j"))
model <- lmer(mean ~ days + (1 | GlobalID), data = species1)
summary(model)
species1$predicted_mean <- predict(model, newdata = species1)
# Plot observed vs predicted with lines
ggplot(species1, aes(x = date ,y = predicted_mean, colour= GlobalID)) +
geom_line() +  # Predicted data
labs(
title = "Observed and Predicted Mean Over Time",
x = "Date",
y = "Mean"
) +
theme_minimal()+
theme(legend.position = "none")
daily_mean <- species1 %>%
group_by(Date) %>%
summarise(daily_mean = mean(mean, na.rm = TRUE))
daily_mean <- species1 %>%
group_by(date) %>%
summarise(daily_mean = mean(mean, na.rm = TRUE))
View(daily_mean)
daily_mean <- species1 %>%
group_by(date) %>%
summarise(daily_mean = mean(mean, na.rm = TRUE))
ggplot(daily_mean, aes(x= date, y= daily_mean))+geom_line()
daily_mean <- species1 %>%
group_by(date) %>%
summarise(
daily_mean = mean(mean, na.rm = TRUE),
sd = sd(mean, na.rm = TRUE)
) %>%
mutate(
lower = daily_mean - 2*sd,  # 95% confidence interval
upper = daily_mean + 2*sd
)
ggplot(daily_mean, aes(x= date, y= daily_mean)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() +
labs(title = "Mean Leaf Coverage with Variance Shaded Area",
x = "Date",
y = "Mean Leaf Coverage")
View(daily_mean)
View(species1)
daily_mean <- species1 %>%
group_by(date) %>%
summarise(
daily_mean = mean(mode, na.rm = TRUE),
sd = sd(mean, na.rm = TRUE)
) %>%
mutate(
lower = daily_mean - sd,  # 95% confidence interval
upper = daily_mean + sd
)
ggplot(daily_mean, aes(x= date, y= daily_mean)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() +
labs(title = "Mean Leaf Coverage with Variance Shaded Area",
x = "Date",
y = "Mean Leaf Coverage")
daily_mean <- species1 %>%
group_by(date) %>%
summarise(
daily_mean = mean(mean, na.rm = TRUE),
sd = sd(mean, na.rm = TRUE)
) %>%
mutate(
lower = daily_mean - sd,  # 95% confidence interval
upper = daily_mean + sd
)
ggplot(daily_mean, aes(x= date, y= daily_mean)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2, fill = "blue") +
theme_minimal() +
labs(title = "Quararibea mean leaf coverage",
x = "Date",
y = "Mean Leaf Coverage")
View(species1)
library(lidR)
dir<- "C:\Users\Vicente\Documents"
dir<- "C:/Users/Vicente/Documents"
laz_files<- list.files(dir, pattern = ".laz")
print(laz_files)
uls<-readLAS(paste(dir,laz_files[0]))
paste(dir,laz_files[0])
uls<-readLAS(paste(dir,laz_files[1]))
paste(dir,laz_files[1])
uls<-readLAS(paste0(dir,"/",laz_files[1]))
uls<-readLAS(paste0(dir,"/",laz_files[1]))
mls<-readLAS(paste0(dir,"/",laz_files[2]))
tls<-readLAS(paste0(dir,"/",laz_files[3]))
plot(uls)
uls<-readLAS(paste0(dir,"/",laz_files[1]))
plot(mls)
plot(tls)
species<- read.csv("C:/Users/Vicente/repo/ForestLandscapes/timeseries/predicted_leafing.csv")
species<- species %>% select(GlobalID,latin)
library(dplyr)
library(lme4)
library(ggplot2)
species<- read.csv("C:/Users/Vicente/repo/ForestLandscapes/timeseries/predicted_leafing.csv")
species<- species %>% select(GlobalID,latin)
print(species)
predicted_df= read.csv("C:/Users/Vicente/repo/ForestLandscapes/timeseries/predictedClassification_5.csv")
predicted_df$date <- as.Date(predicted_df$date, format = "%Y_%m_%d")
predicted_df<- predicted_df %>% select(-system.index, -.geo)
print(head(predicted_df))
predicted_grouped <- predicted_df %>%
group_by(GlobalID, date) %>%
summarize(
total = n(),  # Count total rows in each group
count_1 = sum(classification == 1, na.rm = TRUE),  # Count occurrences of class 1
count_3 = sum(classification == 3, na.rm = TRUE)   # Count occurrences of class 3
)
rm(predict_df)
predicted_grouped$leaf_coverage<- predicted_grouped$count_1/predicted_grouped$total
predicted_grouped <- predicted_grouped %>%
left_join(species %>% select(GlobalID, latin) %>% distinct(GlobalID, .keep_all = TRUE), by = "GlobalID")
print(predicted_grouped)
individuals <- length(unique(predicted_grouped$GlobalID))
print(individuals)
species_count <- predicted_grouped %>%
group_by(latin) %>%
summarize(individual_count = n_distinct(GlobalID))%>%
arrange(desc(individual_count))
print(head(species_count))
species1 <- predicted_grouped %>% filter(latin == species_count$latin[1])
ggplot(species1, aes(x = date, y = leaf_coverage, colour= GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: reduced mean classified pixel",
x = "Date",
y = "Mean classified pixel"
) +
theme_minimal() +
theme(legend.position = "none")
species1 <- predicted_grouped %>% filter(latin == species_count$latin[1])
ggplot(head(species1), aes(x = date, y = leaf_coverage, colour= GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: reduced mean classified pixel",
x = "Date",
y = "Mean classified pixel"
) +
theme_minimal() +
theme(legend.position = "none")
head(species1)
species1 <- predicted_grouped %>% filter(latin == species_count$latin[1])
first_10_individuals <- unique(species1$GlobalID)[1:10]
species1_subset <- species1 %>% filter(GlobalID %in% first_10_individuals)
# Plot
ggplot(species1_subset, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: Reduced Mean Classified Pixel",
x = "Date",
y = "Mean Classified Pixel"
) +
theme_minimal() +
theme(legend.position = "none")
species1 <- predicted_grouped %>% filter(latin == species_count$latin[1])
first_10_individuals <- unique(species1$GlobalID)[1:5]
species1_subset <- species1 %>% filter(GlobalID %in% first_10_individuals)
# Plot
ggplot(species1_subset, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: Reduced Mean Classified Pixel",
x = "Date",
y = "Mean Classified Pixel"
) +
theme_minimal() +
theme(legend.position = "none")
individuals <- length(unique(predicted_grouped$GlobalID))
print(individuals)
species_count <- predicted_grouped %>%
group_by(latin) %>%
summarize(individual_count = n_distinct(GlobalID))%>%
arrange(desc(individual_count))
print(head(species_count))
individuals <- length(unique(predicted_grouped$GlobalID))
print(individuals)
species_count <- predicted_grouped %>%
group_by(latin) %>%
summarize(individual_count = n_distinct(GlobalID))%>%
arrange(desc(individual_count))
print(species_count)
species1 <- predicted_grouped %>% filter(latin == species_count$latin[19])
first_10_individuals <- unique(species1$GlobalID)[1:5]
species1_subset <- species1 %>% filter(GlobalID %in% first_10_individuals)
# Plot
ggplot(species1_subset, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: Reduced Mean Classified Pixel",
x = "Date",
y = "Mean Classified Pixel"
) +
theme_minimal() +
theme(legend.position = "none")
species1 <- predicted_grouped %>% filter(latin == species_count$latin[19])
first_10_individuals <- unique(species1$GlobalID)[1:29]
species1_subset <- species1 %>% filter(GlobalID %in% first_10_individuals)
# Plot
ggplot(species1_subset, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Quararibea Stenophylla: Reduced Mean Classified Pixel",
x = "Date",
y = "Mean Classified Pixel"
) +
theme_minimal() +
theme(legend.position = "none")
species1 <- predicted_grouped %>% filter(latin == species_count$latin[19])
# Plot
ggplot(species1, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Brosimum alicastrum",
x = "Date",
y = "Leaf Coverage index"
) +
theme_minimal() +
theme(legend.position = "none")
ggplot(species1, aes(x = date, y = leaf_coverage, colour = GlobalID)) +
geom_line() +
labs(
title = "Brosimum alicastrum",
x = "Date",
y = "Leaf Coverage index"
) +
theme_minimal() +
theme(legend.position = "none")
install.packages("lidR"); library("lidR")
library(rLiDAR)
# Setting the working directory
setwd("C:\Users\Vicente\Downloads\Mohan et al. 2021. ITD Tutorial")
# Setting the working directory
setwd("C:/Users/Vicente/Downloads/Mohan et al. 2021. ITD Tutorial")
site1_pointcloud <- lidR::readLAS("site1_uavsfm_pointcloud.las")
# Using the catalog() function to read a large point cloud
site2_pointcloud <- lidR::readLAScatalog("site2_uavlidar_pointcloud.las")
# Loading the region of interest in .shp - Sample plots
site1plot_shp <- raster::shapefile("site1_plot.shp")
site2plot_shp <- raster::shapefile("site2_plot.shp")
# Creating a buffer of the sample plots
site1plot_buffer <- raster::buffer(site1plot_shp, width = 3)
site2plot_buffer <- raster::buffer(site2plot_shp, width = 3)
# Clipping the point cloud within the region of interest
site1plot_pointcloud <- clip_roi(site1_pointcloud,site1plot_buffer)
site2plot_pointcloud <- clip_roi(site2_pointcloud,site2plot_buffer)
# Plot and visualize the point clouds
plot(site1plot_pointcloud)
plot(site2plot_pointcloud)
# Setting ground classification function arguments
# Sequence of windows sizes
ws <- seq(3,12,3)
# Sequence of height thresholds
th <- seq(0.1,1.5,length.out = length(ws))
ws
th
site1_ground_points <- classify_ground(site1plot_pointcloud, pmf(ws,th))
site2_ground_points <- classify_ground(site2plot_pointcloud, pmf(ws,th))
cs_dtm <- 1 # output cellsize of the dtm
# Creating dtm
site1_dtm <- grid_terrain(site1_ground_points, cs_dtm, knnidw())
site2_dtm <- grid_terrain(site2_ground_points, cs_dtm, knnidw())
# Plot and visualize the dtm in 3d
plot_dtm3d(site1_dtm)
plot_dtm3d(site2_dtm)
install.packages("rLiDAR"); library("rLiDAR")
# Setting the working directory
setwd("C:/Users/Vicente/Downloads/Mohan et al. 2021. ITD Tutorial")
site1_pointcloud <- lidR::readLAS("site1_uavsfm_pointcloud.las")
# Using the catalog() function to read a large point cloud
site2_pointcloud <- lidR::readLAScatalog("site2_uavlidar_pointcloud.las")
site1plot_shp <- raster::shapefile("site1_plot.shp")
site2plot_shp <- raster::shapefile("site2_plot.shp")
# Creating a buffer of the sample plots
site1plot_buffer <- raster::buffer(site1plot_shp, width = 3)
site2plot_buffer <- raster::buffer(site2plot_shp, width = 3)
site1plot_pointcloud <- clip_roi(site1_pointcloud,site1plot_buffer)
site2plot_pointcloud <- clip_roi(site2_pointcloud,site2plot_buffer)
plot(site1plot_pointcloud)
plot(site2plot_pointcloud)
# Setting ground classification function arguments
# Sequence of windows sizes
ws <- seq(3,12,3)
ws
# Sequence of height thresholds
th <- seq(0.1,1.5,length.out = length(ws))
th
site1_ground_points <- classify_ground(site1plot_pointcloud, pmf(ws,th))
site2_ground_points <- classify_ground(site2plot_pointcloud, pmf(ws,th))
cs_dtm <- 1 # output cellsize of the dtm
# Creating dtm
site1_dtm <- grid_terrain(site1_ground_points, cs_dtm, knnidw())
site2_dtm <- grid_terrain(site2_ground_points, cs_dtm, knnidw())
plot_dtm3d(site1_dtm)
plot_dtm3d(site2_dtm)
site1_hnorm <- normalize_height(site1_ground_points, site1_dtm)
site2_hnorm <- normalize_height(site2_ground_points, site2_dtm)
# Defining chm function arguments
cs_chm <- 0.5 # output cellsize of the chm
# Creating chm
site1_chm <- grid_canopy(site1_hnorm, cs_chm, p2r(na.fill = knnidw(k=3,p=2)))
site2_chm <- grid_canopy(site2_hnorm, cs_chm, p2r(na.fill = knnidw(k=3,p=2)))
# Defining smoothing filter window size
smooth_ws <- 5 # smoothing filter window size
site1_schm <- rLiDAR::CHMsmoothing(site1_chm,filter = 'mean',ws=smooth_ws)
install.packages("rLiDAR")
library("rLiDAR")
install.packages("rLiDAR", repos="http://R-Forge.R-project.org"
install.packages("rLiDAR", repos="http://R-Forge.R-project.org")
install.packages("rLiDAR", repos="http://R-Forge.R-project.org")
install.packages("rLiDAR")
library(tools, lib.loc = "C:/Program Files/R/R-3.3.2/library")
install.packages("rLiDAR")
install.packages("rLiDAR")
install.packages("C:/Users/Vicente/Downloads/rLiDAR_0.1.5.tar.gz", repos = NULL, type = "source")
library("rLiDAR")
install.packages("rLiDAR")
install.packages("C:/Users/Vicente/Downloads/rLiDAR_0.1.5.tar.gz", repos = NULL, type = "source")
install.packages("bitops")
install.packages("spatstat.geom")
install.packages("geometry")
install.packages("C:/Users/Vicente/Downloads/rLiDAR_0.1.5.tar.gz", repos = NULL, type = "source")
library("rLiDAR")
library("rLiDAR")
library("lidR")
# Setting the working directory
setwd("C:/Users/Vicente/Downloads/Mohan et al. 2021. ITD Tutorial")
site1_pointcloud <- lidR::readLAS("site1_uavsfm_pointcloud.las")
site1_pointcloud <- lidR::readLAS("site1_uavsfm_pointcloud.las")
# Using the catalog() function to read a large point cloud
site2_pointcloud <- lidR::readLAScatalog("site2_uavlidar_pointcloud.las")
site1plot_shp <- raster::shapefile("site1_plot.shp")
site2plot_shp <- raster::shapefile("site2_plot.shp")
site1plot_buffer <- raster::buffer(site1plot_shp, width = 3)
site2plot_buffer <- raster::buffer(site2plot_shp, width = 3)
site1plot_pointcloud <- clip_roi(site1_pointcloud,site1plot_buffer)
site2plot_pointcloud <- clip_roi(site2_pointcloud,site2plot_buffer)
# Plot and visualize the point clouds
plot(site1plot_pointcloud)
plot(site2plot_pointcloud)
# Setting ground classification function arguments
# Sequence of windows sizes
ws <- seq(3,12,3)
ws
# Sequence of height thresholds
th <- seq(0.1,1.5,length.out = length(ws))
th
site1_ground_points <- classify_ground(site1plot_pointcloud, pmf(ws,th))
site2_ground_points <- classify_ground(site2plot_pointcloud, pmf(ws,th))
cs_dtm <- 1 # output cellsize of the dtm
site1_dtm <- grid_terrain(site1_ground_points, cs_dtm, knnidw())
site2_dtm <- grid_terrain(site2_ground_points, cs_dtm, knnidw())
# Plot and visualize the dtm in 3d
plot_dtm3d(site1_dtm)
plot_dtm3d(site2_dtm)
site1_hnorm <- normalize_height(site1_ground_points, site1_dtm)
site2_hnorm <- normalize_height(site2_ground_points, site2_dtm)
# Defining chm function arguments
cs_chm <- 0.5 # output cellsize of the chm
site1_chm <- grid_canopy(site1_hnorm, cs_chm, p2r(na.fill = knnidw(k=3,p=2)))
site2_chm <- grid_canopy(site2_hnorm, cs_chm, p2r(na.fill = knnidw(k=3,p=2)))
# Defining smoothing filter window size
smooth_ws <- 5 # smoothing filter window size
site1_schm <- rLiDAR::CHMsmoothing(site1_chm,filter = 'mean',ws=smooth_ws)
site2_schm <- rLiDAR::CHMsmoothing(site2_chm,filter = 'mean',ws=smooth_ws)
# Defining tree detection function arguments
ttop_lmf_ws <- 7 # treetop detection local maxima filter window size
ttop_lmf_hmin <- 3 # minimum height threshold
site1_ttops <- rLiDAR::FindTreesCHM(site1_schm, ttop_lmf_ws, ttop_lmf_hmin)
site2_ttops <- rLiDAR::FindTreesCHM(site2_schm, ttop_lmf_ws, ttop_lmf_hmin)
site1_ttops<-SpatialPointsDataFrame(site1_ttops[,1:2],site1_ttops)
library(sp)
# Transforming detected treetops into spatial points
site1_ttops<-SpatialPointsDataFrame(site1_ttops[,1:2],site1_ttops)
site2_ttops<-SpatialPointsDataFrame(site2_ttops[,1:2],site2_ttops)
# Plotting chm and treetops
plot(site1_schm)
plot(site1_ttops,add = T)
plot(site2_schm)
plot(site2_ttops,add = T)
View(site2_ttops)
# Exporting dtm in TIFF format
writeRaster(site1_dtm,"Products/site1plot_dtm.tif")
library(raster)
raster::writeRaster(site1_dtm,"Products/site1plot_dtm.tif")
writeRaster(site2_dtm,"Products/site2plot_dtm.tif")
# Exporting chm in TIFF format
writeRaster(site1_chm,"Products/site1plot_chm.tif", format = "GTiff")
writeRaster(site2_chm,"Products/site2plot_chm.tif", format = "GTiff")
# Exporting tree tops in SHAPEFILE format
raster::shapefile(site1_ttops,"Products/site1plot_ttops.shp")
raster::shapefile(site2_ttops,"Products/site2plot_ttops.shp")
